#version 460

#extension GL_ARB_shading_language_include : enable
#pragma optionNV(unroll all)
#define UNROLL_LOOP

#extension GL_NV_mesh_shader : require
#extension GL_NV_gpu_shader5 : require
#extension GL_ARB_gpu_shader_int64 : require

#import <voxy:lod/nvmesh/bindings.glsl>
#import <voxy:lod/section.glsl>
#line 12

#define MESH_WORKLOAD_PER_INVOCATION 16

layout(local_size_x=1) in;

taskNV out Task {
    vec3 origin;//Offset to camera in world space (already multiplied by lod level)
    uint baseOffset;//Base offset into the quad data buffer
    uint meta;//First 4 bits is lod level, remaining is quadCount
} task;

void main() {
    uint sectionId = gl_WorkGroupID.x;
    bool visibleLastFrame = visibilityData[sectionId] == frameId;

    //If it wasnt visible last frame then dont render this frame ** (do temporal coherance)
    if (!visibleLastFrame) {
        gl_TaskCountNV = 0;
        return;
    }
    SectionMeta meta = sectionData[sectionId];
    uint lodLvl = extractDetail(meta);
    ivec3 lodPos= extractPosition(meta);
    //Relative position to camera with resepct to lod level to check for visibility bits
    ivec3 cpos = lodPos-(baseSectionPos>>lodLvl);
    //Relative position to camera
    task.origin = vec3(((lodPos<<lodLvl)-baseSectionPos)<<5)-cameraSubPos;

    task.baseOffset = extractQuadStart(meta);
    task.meta = lodLvl&0xFu;

    uint cnt = meta.cntA&0xFFFF;//Skip translucency

    task.meta |= cnt<<4;
    gl_TaskCountNV = (cnt+MESH_WORKLOAD_PER_INVOCATION-1)/MESH_WORKLOAD_PER_INVOCATION;
}